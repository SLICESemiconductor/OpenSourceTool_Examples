** sch_path: /home/slice/xschem/tb_OTA_PVT/tb_OTA_PVT.sch
**.subckt tb_OTA_PVT
Vvdda vdda vssa xvdda
Iisnk vdda ibias xibias
C2 vout vssa {xCload} m=1
xota vdda vinp vfb vssa vout ibias OTA
Vstep vinp net1 pwl (0 0 {xtsim/2} 0 {{xtsim/2}+xtrf} {xstep_en*10m})
Vvinp net1 vssa xvinp
Vvssa vssa GND 0
xstb vfb vout loopgainprobe
**** begin user architecture code

** opencircuitdesign pdks install
*.lib $::SKYWATER_MODELS/sky130.lib.spice tt
.lib /home/slice/pdk/SW130/share/pdk/sky130A/libs.tech/combined/sky130.lib.spice tt
*.lib /home/slice/pdk/SW130/share/pdk/sky130A/libs.tech/combined/sky130.lib.spice ss
*.lib /home/slice/pdk/SW130/share/pdk/sky130A/libs.tech/combined/sky130.lib.spice ff
*.lib /home/slice/pdk/SW130/share/pdk/sky130A/libs.tech/combined/sky130.lib.spice sf
*.lib /home/slice/pdk/SW130/share/pdk/sky130A/libs.tech/combined/sky130.lib.spice fs

* Parameters
.param xvdda = 1.8
.param xvinp = 1
.param xibias = 2u
.param xCload = 2p
.param xgm_dp = 1e-3
.param xRin = 1/xgm_dp
.param xCout = 1p
.param xRout = 1e6
.param xtrf = 50p
* need to set this equal to xtsim in the .control statement
.param xtsim = 50u
*.param xtsim = 1m
.csparam xtsim_var = 'xtsim'
.param xstep_en = 1
.temp 27
*.set csnumprec=2


  .control

  *let xtsim_var = 50u
  *let xtsim_var = 1m
  save all
   echo $&xtsim_var
*.csparam xtsim_var = 50u
** 1. TRAN ANALYSIS **

  tran 1n $&xtsim_var
  *tran 1n xtsim_var
  remzerovec
  write tb_OTA_PVT_tran.raw

** 2. AC ANALYSIS **

  alter i.xstb.Ii acmag=0
  alter v.xstb.Vi acmag=1

  ac dec 10 1 100G
  remzerovec
  write tb_OTA_PVT_ac1.raw

  alter i.xstb.Ii acmag=1
  alter v.xstb.Vi acmag=0
  ac dec 10 1 100G
  * use this line if you want the phase response to start at 0deg (more conventional and directly corresponds to Franks derivation)
  * also the measures assume phase starts at 0deg
  let av = {1/(1/(2*(ac1.i(v.xstb.Vi)*ac2.v(xstb.x)-ac1.v(xstb.x)*ac2.i(v.xstb.Vi))+ac1.v(xstb.x)+ac2.i(v.xstb.Vi))-1)}
  remzerovec
  write tb_OTA_PVT_ac2.raw

  ** 3. MEASURES **

  * I am using octave to summarise all ac_measures files into a csv file which is then read by loffice. loffice (mostly!) rounds to 3 decimal
  * places which I can't seem to change. Therefore, ngspice needs to output to 3 decimal places in order for the user to be able to
  * find a measurement, shown in the loffice csv summary, in the original raw files (to determine corner run). If the numbers are
  * > 10 you need csnumprec = 5 (5 digits means 10 and 3 decimal places). If the numbers are < 10 set csmnumprec = 4 and if numbers
  * are > 100, set csmnumprec = 6. This is why before I write the measure to the output txt file I check if it is < 10 / >=10 / >= 100
  * and set csmnumprec accordingly

  * 3.1 DC gain (Av_0):
  meas AC Av_0 FIND vdb(av) AT=1
  if $&Av_0 < 10
  set csnumprec=4
  end
  if $&Av_0 >= 10
  set csnumprec=5
  end
  if $&Av_0 >= 100
  set csnumprec=6
  end
  echo "$&Av_0" > ac_measures.txt
  echo --

  * 3.2 Bandwidth (BW):
  let n45_rads = -45*(pi/180)
  meas AC BW WHEN vp(av)=n45_rads CROSS=1
  let BW_kHz = BW/1e3
  if $&BW_kHz < 10
  set csnumprec=4
  end
  if $&BW_kHz >= 10
  set csnumprec=5
  end
  if $&BW_kHz >= 100
  set csnumprec=6
  end
  echo "$&BW_kHz" >> ac_measures.txt
  echo --

  * 3.3 Av at BW (Av_BW):
  *I am leaving this in for infomation but typically dont use it
  *meas AC Av_BW FIND vdb(av) WHEN vp(av)=n45_rads CROSS=1
  *echo "$&Av_BW" >> ac_measures.txt
  *echo --

  * 3.4 Unity loop gain frequency (ULGF):
  meas AC ULGF WHEN vdb(av)=0
  let ULGF_MHz = ULGF/1e6
  if $&ULGF_MHz < 10
  set csnumprec=4
  end
  if $&ULGF_MHz >= 10
  set csnumprec=5
  end
  if $&ULGF_MHz >= 100
  set csnumprec=6
  end
  echo "$&ULGF_MHz" >> ac_measures.txt
  echo --

  * 3.5 Phase margin (PM):
  meas AC ULGF_phi_rads FIND vp(av) WHEN vdb(av)=0 CROSS=1
  let ULGF_phi_deg = ULGF_phi_rads*(180/pi)
  let PM = 180+ULGF_phi_deg
  if $&PM < 10
  set csnumprec=4
  end
  if $&PM >= 10
  set csnumprec=5
  end
  if $&PM >= 100
  set csnumprec=6
  end
  echo "$&PM" >> ac_measures.txt
  echo --

  * 3.6 Gain margin (GM):
  * putting in -179 since a purely 2nd-order system so doesnt ever achieve -180
  * will prob revisit this later and change to 180
  let n180_rads = -179*(pi/180)
  meas AC GM FIND vdb(av) WHEN vp(av)=n180_rads CROSS=1
  * Note: The no of significant digits increases by 1 to include the - sign
  if $&GM < 10
  set csnumprec=5
  end
  if $&GM >= 10
  set csnumprec=6
  end
  if $&GM >= 100
  set csnumprec=7
  end
  echo "$&GM" >> ac_measures.txt
  echo --

  setplot

quit 0
.endc




**** end user architecture code
**.ends

* expanding   symbol:  OTA.sym # of pins=6
** sym_path: /home/slice/xschem/tb_OTA_PVT/OTA.sym
** sch_path: /home/slice/xschem/tb_OTA_PVT/OTA.sch
.subckt OTA vdda vinp vinn vssa vout ibias
*.iopin ibias
*.ipin vdda
*.ipin vssa
*.ipin vinp
*.ipin vinn
*.opin vout
XM3 pdio vinp net1 vssa sky130_fd_pr__nfet_01v8 L=0.15 W=1 nf=1 ad='int((nf+1)/2) * W/nf * 0.29' as='int((nf+2)/2) * W/nf * 0.29' pd='2*int((nf+1)/2)
+ * (W/nf + 0.29)' ps='2*int((nf+2)/2) * (W/nf + 0.29)' nrd='0.29 / W' nrs='0.29 / W' sa=0 sb=0 sd=0 mult=40 m=40
XM4 vout vinn net1 vssa sky130_fd_pr__nfet_01v8 L=0.15 W=1 nf=1 ad='int((nf+1)/2) * W/nf * 0.29' as='int((nf+2)/2) * W/nf * 0.29' pd='2*int((nf+1)/2)
+ * (W/nf + 0.29)' ps='2*int((nf+2)/2) * (W/nf + 0.29)' nrd='0.29 / W' nrs='0.29 / W' sa=0 sb=0 sd=0 mult=40 m=40
XM5 pdio pdio vdda vdda sky130_fd_pr__pfet_01v8 L=2 W=1 nf=1 ad='int((nf+1)/2) * W/nf * 0.29' as='int((nf+2)/2) * W/nf * 0.29' pd='2*int((nf+1)/2)
+ * (W/nf + 0.29)' ps='2*int((nf+2)/2) * (W/nf + 0.29)' nrd='0.29 / W' nrs='0.29 / W' sa=0 sb=0 sd=0 mult=4 m=4
XM2 net1 ibias vssa vssa sky130_fd_pr__nfet_01v8 L=2 W=1 nf=1 ad='int((nf+1)/2) * W/nf * 0.29' as='int((nf+2)/2) * W/nf * 0.29' pd='2*int((nf+1)/2)
+ * (W/nf + 0.29)' ps='2*int((nf+2)/2) * (W/nf + 0.29)' nrd='0.29 / W' nrs='0.29 / W' sa=0 sb=0 sd=0 mult=4 m=4
XM1 ibias ibias vssa vssa sky130_fd_pr__nfet_01v8 L=2 W=1 nf=1 ad='int((nf+1)/2) * W/nf * 0.29' as='int((nf+2)/2) * W/nf * 0.29' pd='2*int((nf+1)/2)
+ * (W/nf + 0.29)' ps='2*int((nf+2)/2) * (W/nf + 0.29)' nrd='0.29 / W' nrs='0.29 / W' sa=0 sb=0 sd=0 mult=4 m=4
XM6 vout pdio vdda vdda sky130_fd_pr__pfet_01v8 L=2 W=1 nf=1 ad='int((nf+1)/2) * W/nf * 0.29' as='int((nf+2)/2) * W/nf * 0.29' pd='2*int((nf+1)/2)
+ * (W/nf + 0.29)' ps='2*int((nf+2)/2) * (W/nf + 0.29)' nrd='0.29 / W' nrs='0.29 / W' sa=0 sb=0 sd=0 mult=4 m=4
.ends


* expanding   symbol:  devices/loopgainprobe.sym # of pins=2
** sym_path: /usr/local/share/xschem/xschem_library/devices/loopgainprobe.sym
** sch_path: /usr/local/share/xschem/xschem_library/devices/loopgainprobe.sch
.subckt loopgainprobe a b
*.iopin b
*.iopin a
**** begin user architecture code
Ii 0 x DC 0 AC 0
Vi x a DC 0 AC 1
Vnodebuffer b x 0
**** end user architecture code
.ends

.GLOBAL GND
.end
